
==> src/SoccerPlayer.h


#ifndef SOCCERPLAYER_H
#define SOCCERPLAYER_H

#include "Player.h"

class SoccerPlayer: public Player {
private:
    int goals;
    int yellowCards;
    string nationality;
    int assists;
    int appearances;

public:
    SoccerPlayer(string name, string nationality, int goals, int yellowCards, int assists, int appearances);
    int getGoals() const;
    int getYellowCards() const;
    string getNationality();
    int getAssists() const;
    int getAppearances() const;
    void addGoals(int goals);
    void addYellowCards(int yellowCards);
    void addAppearance();
    void addAssists(int assists);
};



#endif //SOCCERPLAYER_H


==> src/BasketballPlayer.h

#ifndef BASKETBALLPLAYER_H
#define BASKETBALLPLAYER_H

#include "Player.h"
using namespace std;
class BasketballPlayer:public Player {
private:
    int points;
    int rebounds;
    int gamesPlayed;
    int assists;
public:
    BasketballPlayer(string name, int points, int rebounds, int assists, int gamesPlayed);
    BasketballPlayer();
    int getPoints() const;
    int getRebounds() const;
    int getAssists() const;
    int getGamesPlayed() const;
    void addGamesPlayed(int games);
    void addRebounds(int rebounds);
    void addAssists(int assists);
    void addPoints(int points);
};



#endif //BASKETBALLPLAYER_H


==> src/Player.cpp

#include "Player.h"

Player::Player() = default;

Player::Player(string name) {
    this->name = name;
}

string Player::getName() const {
    return this->name;
}

map<int, string> Player::getTeamTime() const {
    return teamTime;
}

void Player::addTeamTime(int year, string team) {
    if(teamTime.find(year) == teamTime.end()) {
        teamTime[year] = team;
    }
}

bool Player::operator==(const Player &other) const {
    return this->name == other.name;
}

bool Player::operator!=(const Player &other) const {
    return this->name != other.name;
}

bool Player::operator==(const string &other) const {
    return this->name == other;
}

bool Player::operator<(const Player &other) const {
    return this->name < other.name;
}

bool Player::operator>(const Player &other) const {
    return this->name > other.name;
}

bool Player::operator<=(const Player &other) const {
    return this->name <= other.name;
}

bool Player::operator>=(const Player &other) const {
    return this->name >= other.name;
}

Player::~Player()=default;

==> src/SoccerPlayer.cpp


#include "SoccerPlayer.h"

SoccerPlayer::SoccerPlayer(string name, string nationality, int goals, int yellowCards, int assists, int appearances) : Player(name) {
    this->nationality = nationality;
    this->goals = goals;
    this->yellowCards = yellowCards;
    this->assists = assists;
    this->appearances = appearances;
}

int SoccerPlayer::getGoals() const {
    return this->goals;
}

int SoccerPlayer::getYellowCards() const {
    return this->yellowCards;
}

string SoccerPlayer::getNationality() {
    return this->nationality;
}

int SoccerPlayer::getAppearances() const {
    return this->appearances;
}

int SoccerPlayer::getAssists() const {
    return this->assists;
}

void SoccerPlayer::addAppearance() {
    appearances++;
}

void SoccerPlayer::addAssists(int assists) {
    this->assists += assists;
}

void SoccerPlayer::addYellowCards(int yellowCards) {
    this->yellowCards += yellowCards;
}

void SoccerPlayer::addGoals(int goals) {
    this->goals += goals;
}


==> src/Graph.cpp


#include "Graph.h"
#include <iostream>
#include <algorithm>
#include <queue>
#include <unordered_set>

Graph::Graph() : adjList(unordered_map<Player,unordered_map<Player,Connection>>(1000)) {}

bool Graph::addEdge(Player& p1, Player& p2, Connection c) {
    if(c == none) { //if there is no connection, do not add an edge
        return false;
    }
    if(adjList.find(p1)!=adjList.end()) {
        if(adjList[p1].find(p2)!=adjList[p1].end()) {
            return false; //if both vertices are already connected, do not add an edge
        }
        adjList[p1][p2]=c;
    }
    else { //if vertex does not have any edges yet, we need to add the adjacency list
        unordered_map<Player,Connection> edges = unordered_map<Player,Connection>(100);
        adjList[p1] = edges;
        adjList[p1][p2] = c;
    }
    addEdge(p2,p1,c); //since this is an undirected graph, add the edge going the other way too
    return true;
}


Graph::Connection Graph::findConnection(SoccerPlayer& p1, SoccerPlayer& p2) { //checks for connectoins between players
    if(p1 == p2) return none;
    map<int,string> tt1 = p1.getTeamTime();
    map<int,string> tt2 = p2.getTeamTime();
    map<int,string>::iterator it1 = tt1.begin();
    map<int,string>::iterator it2 = tt2.begin();
    while(it1 != tt1.end() && it1->first < it2->first) {
        ++it1;
    }
    while(it2 != tt2.end() && it2->first < it1->first) {
        ++it2;
    }
    while(it1 != tt1.end() && it2 != tt2.end() && it1->first == it2->first) {
        if(it1->second == it2->second && it1->second != "") {
            return teamTime;
        }
        ++it1;
        ++it2;
    }
    if(p1.getGoals()==p2.getGoals()) {
        return goals;
    }
    if(p1.getNationality()==p2.getNationality()) {
        return nationality;
    }
    if(p1.getYellowCards() == p2.getYellowCards()) {
        return yellowCards;
    }
    return none;
}

Graph::Connection Graph::findConnection(BasketballPlayer& p1, BasketballPlayer& p2) { //checks for connections between players
    if(p1 == p2) return none;
    map<int,string> tt1 = p1.getTeamTime();
    map<int,string> tt2 = p2.getTeamTime();
    map<int,string>::iterator it1 = tt1.begin();
    map<int,string>::iterator it2 = tt2.begin();
    while(it1 != tt1.end() && it1->first < it2->first) {
        ++it1;
    }
    while(it1 != tt1.end() && it2 != tt2.end() && it2->first < it1->first) {
        ++it2;
    }
    while(it1 != tt1.end() && it2 != tt2.end() && it1->first == it2->first) {
        if(it1->second == it2->second) {
            return teamTime;
        }
        ++it1;
        ++it2;
    }
    if(p1.getPoints() == p2.getPoints()) {
        return points;
    }
    if(p1.getRebounds() == p2.getRebounds()) {
        return rebounds;
    }
    if(p1.getAssists()==p2.getAssists()) {
        return assists;
    }
    if(p1.getGamesPlayed() == p2.getGamesPlayed()) {
        return gamesPlayed;
    }
    return none;
}

vector<pair<Player,Graph::Connection>> Graph::shortestPathBFS(const Player& src, const Player& dest) {
    queue<pair<Player,Connection>> q; //queue necessary for BFS
    unordered_map<Player,pair<Player,Connection>> prevs = unordered_map<Player,pair<Player,Connection>>(1000); //contains previous nodes, used for finding the overall path
    q.emplace(src,none);
    prevs[src] = q.front();
    Connection last = none; //this variable will be used to hold the connection leading to the last node
    while(!q.empty()) { //mostly standard BFS algorithm
        auto player = q.front();
        q.pop();
        if(player.first == dest) {
            last = player.second;
            break;
        }
        for(pair<Player,Connection> couple : adjList[player.first]) {
            if(prevs.find(couple.first) == prevs.end()) {
                q.push(couple);
                prevs[couple.first] = player; //mark the previous vertex leading to a given node
            }
        }
    }
    if(prevs.find(dest)==prevs.end()) { //if dest was never reached it will not be in prevs
        return {};
    }
    vector<pair<Player,Connection>> shortestPath; //vector we will return
    shortestPath.emplace_back(dest,last);
    pair<Player,Connection> node = prevs[dest];
    while(node.first != src) { //works our way backwards from src to dest
        shortestPath.push_back(node);
        node = prevs[node.first];
    }
    shortestPath.push_back(node); //this is src
    reverse(shortestPath.begin(),shortestPath.end()); //reverse so starts at src and ends at dest
    return shortestPath;
}

vector<pair<Player,Graph::Connection>> Graph::shortestPathDijkstra(const Player& src, const Player& dest) {
    unordered_map<Player,pair<int,pair<Player,Connection>>> paths = unordered_map<Player,pair<int,pair<Player,Connection>>>(1000); //key is a player, for every player the important values are an int (d[v]), a player (p[v]) and the connection between this node and p[v]
    for(auto p : adjList) {
        paths[p.first] = pair<int,pair<Player,Connection>>(INT_MAX,pair<Player,Connection>(Player(),none)); //initializing every path as INT_MAX to allow for eventual relaxing
    }
    paths[src].first = 0; //d[v] for src is 0
    priority_queue<pair<int,Player>, vector<pair<int,Player>>, greater<pair<int,Player>>> pq; //priority queue necessary for Dijkstra's
    pq.emplace(0,src);
    Connection last = none; //this is the dummy connection used for the last node in our path
    while(!pq.empty()) {
        auto dist = pq.top(); //Dijkstra's always goes to the shortest leftover path, which is at pq.top()
        pq.pop();
        if(dist.second == dest) {
            break; //end the loop early once we hit dest since that is the point of this algorithm
        }
        for(auto couple: adjList[dist.second]) {
            if(paths[dist.second].first+1 < paths[couple.first].first) { //relax the path if it's shorter
                paths[couple.first].first = paths[dist.second].first+1;
                paths[couple.first].second.first = dist.second;
                paths[couple.first].second.second = couple.second;
                pq.emplace(paths[couple.first].first,couple.first);
            }
        }
    }
    if(paths[dest].first == INT_MAX) { //if we never got to dest, then d[v] is INT_MAX
        return {};
    }
    vector<pair<Player,Connection>> shortestPath; //this is the vector containing the string of connections
    shortestPath.emplace_back(dest,last);
    pair<Player,Connection> node = paths[dest].second;
    while(node.first != src) { //this works our way backwards from dest to src
        shortestPath.push_back(node);
        node = paths[node.first].second;
    }
    shortestPath.push_back(node); //this is src
    reverse(shortestPath.begin(),shortestPath.end()); //reverse so starts at src and ends at dest
    return shortestPath;
}
//standard BFS algorithm to check if a graph is connected
vector<Player> Graph::checkConnectivity(const Player &src) {
    unordered_set<Player> visited;
    queue<Player> q;
    q.push(src);
    visited.insert(src);
    while(!q.empty()) {
        Player curr = q.front();
        q.pop();
        for(auto couple: adjList[curr]) {
            if(visited.find(couple.first) == visited.end()) {
                q.push(couple.first);
                visited.insert(couple.first);
            }
        }
    }
    vector<Player> v; //this is the vector we will return
    for(auto p: adjList) {
        if(visited.find(p.first)==visited.end()) { //if a vertex is in the adjList but not a visited node, add it to the vector
            v.push_back(p.first);
        }
    }
    return v;
}

unordered_map<Player,unordered_map<Player,Graph::Connection>>& Graph::getAdjList() {
    return adjList;
}

json Graph::toJson() {
    json j;
    for(auto p: adjList) {
        for(auto couple: p.second) {
            j["edges"].push_back({
                {"source", p.first.getName()},
                {"adjacent",couple.first.getName()},
                {"connection",couple.second}
            });
        }
    }
    return j;
}

==> src/Player.h

#ifndef PLAYER_H
#define PLAYER_H

#include <string>
#include <unordered_map>
#include <map>

using namespace std;

class Player
{
    string name;               // holds the name of a player
    map<int, string> teamTime; // use an ordered map here because it's easier to manage by year, represents the team a player was on during a given year
public:
    Player(string name);
    Player();
    string getName() const;
    map<int, string> getTeamTime() const;
    void addTeamTime(int year, string team);
    bool operator==(const Player &other) const;
    bool operator!=(const Player &other) const;
    bool operator==(const string &other) const;
    bool operator<(const Player &other) const;
    bool operator>(const Player &other) const;
    bool operator<=(const Player &other) const;
    bool operator>=(const Player &other) const;
    virtual ~Player();
};
// hash for player so it can be used in unordered maps and sets, which are more efficient
// namespace std
// {
//     template <>
//     struct hash<Player>
//     {
//         size_t operator()(const Player &p) const noexcept
//         {
//             return hash<string>()(p.getName());
//         }
//     };
// }

#endif // PLAYER_H


==> src/Graph.h

#ifndef GRAPH_H
#define GRAPH_H

#include "SoccerPlayer.h"
#include "BasketballPlayer.h"
#include <vector>
#include "json.hpp"
using json = nlohmann::json;
using namespace std;
class Graph {
public:
    Graph();
    enum Connection {none, teamTime, goals, yellowCards, nationality, points, rebounds, gamesPlayed, assists}; //this is for knowing what connects two players, which will be used in the output
    static Connection findConnection(SoccerPlayer& p1, SoccerPlayer& p2);
    static Connection findConnection(BasketballPlayer& p1, BasketballPlayer& p2);//finds what connects two players with some priority to specific connection types
    bool addEdge(Player& p1, Player& p2, Connection c); //adds an edge between two players with a given connection
    vector<pair<Player,Connection>> shortestPathBFS(const Player& src, const Player& dest); //finds the shortest path between two players using BFS
    vector<pair<Player,Connection>> shortestPathDijkstra(const Player& src, const Player& dest); //finds the shortest path between two players using Dijkstra's
    vector<Player> checkConnectivity(const Player& src); //checks if a graph is connected, returns a vector of the non-connected vertices
    unordered_map<Player,unordered_map<Player,Connection>>& getAdjList();
    json toJson();
private:
    unordered_map<Player,unordered_map<Player,Connection>> adjList; //an adjacency list of players, first component is a player, second is a map with adjacent players and the thing that connects them
};



#endif //GRAPH_H


==> src/BasketballPlayer.cpp


#include "BasketballPlayer.h"

BasketballPlayer::BasketballPlayer():Player() {
  points = 0;
  rebounds = 0;
  gamesPlayed = 0;
  assists = 0;
}

BasketballPlayer::BasketballPlayer(string name, int points, int rebounds, int assists, int gamesPlayed):Player(name){
  this->points = points;
  this->rebounds = rebounds;
  this->assists = assists;
  this->gamesPlayed = gamesPlayed;
}

int BasketballPlayer::getPoints() const {
  return this->points;
}

int BasketballPlayer::getRebounds() const {
  return this->rebounds;
}

int BasketballPlayer::getAssists() const {
  return this->assists;
}

int BasketballPlayer::getGamesPlayed() const {
  return this->gamesPlayed;
}

void BasketballPlayer::addAssists(int assists) {
  this->assists += assists;
}

void BasketballPlayer::addPoints(int points) {
  this->points += points;
}

void BasketballPlayer::addRebounds(int rebounds) {
  this->rebounds += rebounds;
}

void BasketballPlayer::addGamesPlayed(int games) {
  gamesPlayed += games;
}


==> src/main.cpp
#include <algorithm>
#include "Graph.h"
#include <iostream>
#include <fstream>
#include <sstream>
#include <cmath>
#define ASIO_STANDALONE
#include "crow.h"
#include <chrono>

using namespace std;

//TODO: Change this, this is just a placeholder
struct CORSHandler {
    struct context {};

    static void before_handle(const crow::request& req, crow::response& res, context&) {
        res.add_header("Access-Control-Allow-Origin", "*");
        res.add_header("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
        res.add_header("Access-Control-Allow-Headers", "Content-Type");
        if (req.method == "OPTIONS"_method) {
            res.code = 204;
            res.end();
        }
    }

    static void after_handle(crow::request& req, crow::response& res, context&) {
        res.add_header("Access-Control-Allow-Origin", "*");
    }
};

//converts basketball players to json to be used in the frontend
void to_json(json& j, const BasketballPlayer& bballer) {
    j = json{
        {"name",bballer.getName()},
        {"points",bballer.getPoints()},
        {"rebounds",bballer.getRebounds()},
        {"assists",bballer.getAssists()},
        {"games",bballer.getGamesPlayed()},
        {"teamTime",bballer.getTeamTime()}
    };
}

//converts soccer players to json to be used in the frontend
void to_json(json& j, const SoccerPlayer& fballer) {
    j = json{
        {"name",fballer.getName()},
        {"goals",fballer.getGoals()},
        {"yellow",fballer.getYellowCards()},
        {"assists",fballer.getAssists()},
        {"games",fballer.getAppearances()},
        {"teamTime",fballer.getTeamTime()}
    };
}

void createBBallGraph(vector<BasketballPlayer>& bballers,unordered_map<string,int>& indHolderBBall,Graph& bballGraph) {
    //taking in data from the basketball dataset
    ifstream file("all_seasons.csv");
    string line;
    getline(file,line);
    BasketballPlayer currPlayerBBall;
    while(getline(file,line)) {
        istringstream iss(line);
        string value;
        vector<string> tokens;
        while(getline(iss,value,',')) {
            tokens.push_back(value);
        }
        string name = tokens[0];
        string team = tokens[1];
        string college = tokens[5];
        int gamesPlayed = stoi(tokens[10]);
        int points = lround(stof(tokens[11])*float(gamesPlayed));
        int rebounds = lround(stof(tokens[12])*float(gamesPlayed));
        int assists = lround(stof(tokens[13])*float(gamesPlayed));
        int year = stoi(tokens[20].substr(0,tokens[20].find('-')));
        if(currPlayerBBall != name) { //if we moved on to a different bball player, make sure we are adding the new player to the list and their attributes
            BasketballPlayer baller = BasketballPlayer(name,points,rebounds,assists,gamesPlayed);
            baller.addTeamTime(year,team);
            bballers.push_back(baller);
            indHolderBBall[name] = int(bballers.size())-1;
            currPlayerBBall = baller;
        }
        else { //we have already visited this player, we are just editing its attributes
            bballers[indHolderBBall[name]].addTeamTime(year,team);
            bballers[indHolderBBall[name]].addAssists(assists);
            bballers[indHolderBBall[name]].addGamesPlayed(gamesPlayed);
            bballers[indHolderBBall[name]].addRebounds(rebounds);
            bballers[indHolderBBall[name]].addPoints(points);
        }
    }
    file.close();
    //create the basketball graph
    for(int i = 0;i < bballers.size(); i++) {
        for(int j = i+1; j < bballers.size(); j++) {
            bballGraph.addEdge(bballers[i],bballers[j],Graph::findConnection(bballers[i],bballers[j]));
        }
    }
}

void createFBallGraph(vector<SoccerPlayer>& fballers,unordered_map<string,int>& indHolderFBall,Graph& fballGraph) {
    string line;
    //id holders which are important for reading data
    unordered_map<int,string> playerID;
    unordered_map<int,string> clubID;
    //creating buckets for each category to make adding edges much faster later on
    unordered_map<string,vector<SoccerPlayer>> natBucket;
    unordered_map<int,vector<SoccerPlayer>> goalBucket;
    unordered_map<int,vector<SoccerPlayer>> yellowBucket;
    unordered_map<int,vector<SoccerPlayer>> assistBucket;
    map<pair<int,string>,vector<SoccerPlayer>> teamBucket;
    unordered_map<int,vector<SoccerPlayer>> appearBucket;
    //gathering data from each club, specifically storing the id number which is important for later
    ifstream file1("clubs.csv");
    getline(file1,line);
    while(getline(file1,line)) {
        istringstream iss(line);
        string value;
        vector<string> tokens;
        while(getline(iss,value,',')) {
            tokens.push_back(value);
        }
        clubID[stoi(tokens[0])] = tokens[2];
    }
    //gathering data from the players themselves
    ifstream file2("fballer.csv");
    getline(file2,line);
    while(getline(file2,line)) {
        istringstream iss(line);
        string value;
        vector<string> tokens;
        while(getline(iss,value,',')) {
            tokens.push_back(value);
        }
        playerID[stoi(tokens[0])] = tokens[3];
        fballers.emplace_back(tokens[3],tokens[9],0,0,0,0);
        indHolderFBall[tokens[3]] = int(fballers.size())-1;
        natBucket[tokens[9]].push_back(fballers[fballers.size()-1]);
    }
    //gathering data from each player's appearance in a game
    ifstream file3("appearances.csv");
    getline(file3,line);
    while(getline(file3,line)) {
        istringstream iss(line);
        string value;
        vector<string> tokens;
        while(getline(iss,value,',')) {
            tokens.push_back(value);
        }
        int pID = stoi(tokens[2]);
        int cID = stoi(tokens[3]);
        int year = stoi(tokens[5].substr(0,tokens[5].find('-')));
        int yellowCards = stoi(tokens[8]);
        int goals = stoi(tokens[10]);
        int assists = stoi(tokens[11]);
        SoccerPlayer& fballer = fballers[indHolderFBall[playerID[pID]]];
        fballer.addAssists(assists);
        fballer.addAppearance();
        fballer.addGoals(goals);
        fballer.addYellowCards(yellowCards);
        if(!fballer.getTeamTime().count(year) && !clubID[cID].empty()) {
            fballer.addTeamTime(year,clubID[cID]);
            teamBucket[{year,clubID[cID]}].push_back(fballer);
        }
    }
    for(auto& fballer : fballers) {
        goalBucket[fballer.getGoals()].push_back(fballer);
        assistBucket[fballer.getAssists()].push_back(fballer);
        yellowBucket[fballer.getYellowCards()].push_back(fballer);
        appearBucket[fballer.getAppearances()].push_back(fballer);
    }

    //add edges between soccer players using buckets to avoid having to do an O(|V|^2) brute force approach
    for(auto p: teamBucket) {
        if(p.first.second.empty()) {
            continue;
        }
        for(int i = 0; i < p.second.size(); i++) {
            for(int j = i+1; j < p.second.size(); j++) {
                fballGraph.addEdge(p.second[i],p.second[j],Graph::teamTime);
            }
        }
    }
    for(auto p: goalBucket) {
        if(p.first < 5) {
            continue;
        }
        for(int i = 0; i < p.second.size(); i++) {
            for(int j = i+1; j < p.second.size(); j++) {
                fballGraph.addEdge(p.second[i],p.second[j],Graph::goals);
            }
        }
    }
    for(auto p: assistBucket) {
        if(p.first < 3) {
            continue;
        }
        for(int i = 0; i < p.second.size(); i++) {
            for(int j = i+1; j < p.second.size(); j++) {
                fballGraph.addEdge(p.second[i],p.second[j],Graph::assists);
            }
        }
    }
    for(auto p: yellowBucket) {
        if(p.first < 5) {
            continue;
        }
        for(int i = 0; i < p.second.size(); i++) {
            for(int j = i+1; j < p.second.size(); j++) {
                fballGraph.addEdge(p.second[i],p.second[j],Graph::yellowCards);
            }
        }
    }
    for(auto p: appearBucket) {
        if(p.first < 20) {
            continue;
        }
        for(int i = 0; i < p.second.size(); i++) {
            for(int j = i+1; j < p.second.size(); j++) {
                fballGraph.addEdge(p.second[i],p.second[j],Graph::gamesPlayed);
            }
        }
    }
    //get rid of any vertices with no connection in fballers
    for(int i = 0; i < fballers.size(); i++) {
        if(fballGraph.getAdjList().find(fballers[i])==fballGraph.getAdjList().end()) {
            fballers[i]=fballers.back();
            fballers.pop_back();
            i--;
        }
    }
    //get rid of duplicates in fballers
    sort(fballers.begin(), fballers.end());
    fballers.erase(unique(fballers.begin(), fballers.end()), fballers.end());
    //make sure the graph is fully connected
    vector<Player> nonConnected = fballGraph.checkConnectivity(fballers[0]);
    for(int i = 0; i < nonConnected.size(); i++) {
        fballGraph.getAdjList().erase(nonConnected[i]);
        fballers[i] = fballers.back();
        fballers.pop_back();
    }
    //reconfigure the index table so we don't get any incorrect indices
    for(int i = 0; i < fballers.size(); i++) {
        indHolderFBall[fballers[i].getName()] = i;
    }
}

int main(){
    //important for maintaining utf-8 in output
    SetConsoleOutputCP(CP_UTF8);

    //vector holding every basketball player, important for the user to know their options and helps with input
    vector<BasketballPlayer> bballers;
    //holds the index of each player in bballers, which is important for knowing where a player is stored in bballers, making access easy
    unordered_map<string,int> indHolderBBall;
    //create the basketball graph
    Graph bballGraph;
    createBBallGraph(bballers,indHolderBBall,bballGraph);

    //vector holding all soccer players in the map, important so the user knows what options they have and helps with dealing with input
    vector<SoccerPlayer> fballers;
    //holds the index of each player in fballers, which is important for knowing where a player is stored in fballers, making access easy
    unordered_map<string,int> indHolderFBall;
    //create the soccer graph
    Graph fballGraph;
    createFBallGraph(fballers,indHolderFBall,fballGraph);

    using json = nlohmann::json;
    crow::App<CORSHandler> app;

    CROW_ROUTE(app, "/bball_graph")
    .methods("GET"_method)([&bballGraph,&bballers]() {
        json j;
        j["graph"] = bballGraph.toJson();
        j["players"] = bballers;
        return crow::response{j.dump()};
    });

    CROW_ROUTE(app,"/fball_graph")
    .methods("GET"_method)([&fballGraph,&fballers]() {
        json j;
        j["graph"] = fballGraph.toJson();
        j["players"] = fballers;
        return crow::response{j.dump()};
    });

    CROW_ROUTE(app, "/bballAlgo")
    .methods("POST"_method)([&bballGraph,&bballers,&indHolderBBall](const crow::request& req) {
        auto body = json::parse(req.body);
        if(!body.contains("from") || !body.contains("to") ||
            indHolderBBall.find(body["from"])==indHolderBBall.end() ||
            indHolderBBall.find(body["to"])==indHolderBBall.end()) {
            return crow::response(400,"Please input valid NBA players from 1992-2022.");
        }
        string from = body["from"];
        string to = body["to"];
        const Player& src = bballers[indHolderBBall.at(from)];
        const Player& dest = bballers[indHolderBBall.at(to)];
        auto start = chrono::high_resolution_clock::now();
        auto bfsPath = bballGraph.shortestPathBFS(src,dest);
        auto stop = chrono::high_resolution_clock::now();
        auto bfsTime = duration_cast<chrono::seconds>(start - stop);
        start = chrono::high_resolution_clock::now();
        auto dijkPath = bballGraph.shortestPathDijkstra(src,dest);
        stop = chrono::high_resolution_clock::now();
        auto dijkTime = duration_cast<chrono::seconds>(stop - start);
        vector<pair<BasketballPlayer,string>> trueBfsPath;
        for(int i = 0; i < bfsPath.size()-1; i++) {
            BasketballPlayer b = (bballers[indHolderBBall.at(bfsPath[i].first.getName())]);
            Graph::Connection c = bfsPath[i+1].second;
            string reason;
            if(c == 1) {
                auto tt = (bballers[indHolderBBall.at(bfsPath[i+1].first.getName())]).getTeamTime();
                for(const auto& p: b.getTeamTime()) {
                    if(tt.find(p.first) != tt.end()) {
                        if(tt[p.first] == p.second) {
                            reason = " was in the team " + p.second + " in the year " + to_string(p.first) + " with ";
                            break;
                        }
                    }
                }
            }
            else if(c == 5) {
                reason = " got " + to_string(b.getPoints()) + " points like ";
            }
            else if(c == 6) {
                reason = " got " + to_string(b.getRebounds()) + " rebounds like ";
            }
            else if(c == 7) {
                reason = " played " + to_string(b.getGamesPlayed()) + " games like ";
            }
            else if(c == 8) {
                reason = " got " + to_string(b.getAssists()) + " assists like ";
            }
            trueBfsPath.emplace_back(b,reason);
        }
        trueBfsPath.emplace_back(bballers[indHolderBBall.at(bfsPath[bfsPath.size()-1].first.getName())],"");
        vector<pair<BasketballPlayer,string>> trueDijkPath;
        for(int i = 0; i < dijkPath.size()-1; i++) {
            BasketballPlayer b = (bballers[indHolderBBall.at(dijkPath[i].first.getName())]);
            Graph::Connection c = dijkPath[i].second;
            string reason;
            if(c == 1) {
                auto tt = (bballers[indHolderBBall.at(dijkPath[i+1].first.getName())]).getTeamTime();
                for(const auto& p: b.getTeamTime()) {
                    if(tt.find(p.first) != tt.end()) {
                        if(tt[p.first] == p.second) {
                            reason = " was in the team " + p.second + " in the year " + to_string(p.first) + " with ";
                            break;
                        }
                    }
                }
            }
            else if(c == 5) {
                reason = " got " + to_string(b.getPoints()) + " points like ";
            }
            else if(c == 6) {
                reason = " got " + to_string(b.getRebounds()) + " rebounds like ";
            }
            else if(c == 7) {
                reason = " played " + to_string(b.getGamesPlayed()) + " games like ";
            }
            else if(c == 8) {
                reason = " got " + to_string(b.getAssists()) + " assists like ";
            }
            trueDijkPath.emplace_back(b,reason);
        }
        trueDijkPath.emplace_back(bballers[indHolderBBall.at(dijkPath[dijkPath.size()-1].first.getName())],"");
        json j;
        j["bfsPath"] = trueBfsPath;
        j["bfsTime"] = bfsTime.count();
        j["dijkPath"] = trueDijkPath;
        j["dijkTime"] = dijkTime.count();
        return crow::response{j.dump()};
    });

    CROW_ROUTE(app, "/fballAlgo")
    .methods("POST"_method)([&fballGraph,&fballers,&indHolderFBall](const crow::request& req) {
        auto body = json::parse(req.body);
        if(!body.contains("from") || !body.contains("to") ||
            indHolderFBall.find(body["from"])==indHolderFBall.end() ||
            indHolderFBall.find(body["to"])==indHolderFBall.end()) {
            return crow::response(400,"Please input valid soccer players.");
        }
        string from = body["from"];
        string to = body["to"];
        const Player& src = fballers[indHolderFBall.at(from)];
        const Player& dest = fballers[indHolderFBall.at(to)];
        auto start = chrono::high_resolution_clock::now();
        auto bfsPath = fballGraph.shortestPathBFS(src,dest);
        auto stop = chrono::high_resolution_clock::now();
        auto bfsTime = duration_cast<chrono::seconds>(start - stop);
        start = chrono::high_resolution_clock::now();
        auto dijkPath = fballGraph.shortestPathDijkstra(src,dest);
        stop = chrono::high_resolution_clock::now();
        auto dijkTime = duration_cast<chrono::seconds>(stop - start);
        vector<pair<SoccerPlayer,string>> trueBfsPath;
        for(int i = 0; i < bfsPath.size()-1; i++) {
            SoccerPlayer f = (fballers[indHolderFBall.at(bfsPath[i].first.getName())]);
            Graph::Connection c = bfsPath[i+1].second;
            string reason;
            if(c == 1) {
                auto nextTT = (fballers[indHolderFBall.at(bfsPath[i+1].first.getName())]).getTeamTime();
                for(const auto& p: f.getTeamTime()) {
                    if(nextTT.find(p.first) != nextTT.end()) {
                        if(nextTT[p.first] == p.second) {
                            reason = " was in the team " + p.second + " in the year " + to_string(p.first) + " with ";
                            break;
                        }
                    }
                }
            }
            else if(c == 2) {
                reason = " got " + to_string(f.getGoals()) + " goals like ";
            }
            else if(c == 3) {
                reason = " got " + to_string(f.getYellowCards()) + " yellow cards like ";
            }
            else if(c == 7) {
                reason = " played " + to_string(f.getAppearances()) + " games like ";
            }
            else if(c == 8) {
                reason = " got " + to_string(f.getAssists()) + " assists like ";
            }
            trueBfsPath.emplace_back(f,reason);
        }
        trueBfsPath.emplace_back(fballers[indHolderFBall.at(bfsPath[bfsPath.size()-1].first.getName())],"");
        vector<pair<SoccerPlayer,string>> trueDijkPath;
        for(int i = 0; i < dijkPath.size()-1; i++) {
            SoccerPlayer f = (fballers[indHolderFBall.at(dijkPath[i].first.getName())]);
            Graph::Connection c = dijkPath[i].second;
            string reason;
            if(c == 1) {
                auto nextTT = (fballers[indHolderFBall.at(bfsPath[i+1].first.getName())]).getTeamTime();
                for(const auto& p: f.getTeamTime()) {
                    if(nextTT.find(p.first) != nextTT.end()) {
                        if(nextTT[p.first] == p.second) {
                            reason = " was in the team " + p.second + " in the year " + to_string(p.first) + " with ";
                            break;
                        }
                    }
                }
            }
            else if(c == 2) {
                reason = " got " + to_string(f.getGoals()) + " goals like ";
            }
            else if(c == 3) {
                reason = " got " + to_string(f.getYellowCards()) + " yellow cards like ";
            }
            else if(c == 7) {
                reason = " played " + to_string(f.getAppearances()) + " games like ";
            }
            else if(c == 8) {
                reason = " got " + to_string(f.getAssists()) + " assists like ";
            }
            trueDijkPath.emplace_back(f,reason);
        }
        trueDijkPath.emplace_back(fballers[indHolderFBall.at(dijkPath[dijkPath.size()-1].first.getName())],"");
        json j;
        j["bfsPath"] = trueBfsPath;
        j["bfsTime"] = bfsTime.count();
        j["dijkPath"] = trueDijkPath;
        j["dijkTime"] = dijkTime.count();
        return crow::response{j.dump()};
    });

    app.port(18080).multithreaded().run();
}
